{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8009c2e-4263-4fad-9854-0c979f7024ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DATA CONSENT INFORMATION:\n",
      "\n",
      "Please read:\n",
      "\n",
      "We wish to record your response data to an anonymized public data repository.\n",
      "\n",
      "Your data will be used for educational teaching purposes practicing data analysis and visualization.\n",
      "\n",
      "Please type 'yes' in the box below if you consent to the upload.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      ">  yes\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thanks for your participation.\n",
      "Please contact philip.lewis@ucl.ac.uk if you have any questions or concerns regarding the stored results\n",
      "\n",
      " \n",
      "Enter your anonymized ID\n",
      " \n",
      "To generate an anonymous 4-letter unique user identifier, please enter:\n",
      "- two letters based on the initials of a childhood friend\n",
      "- two letters based on the initials of a favorite actor / actress\n",
      " \n",
      "e.g., if your friend was called Charlie Brown and the film star was Tom Cruise,\n",
      "then your unique identifier would be CBTC\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      ">  dsds\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User entered id: dsds\n"
     ]
    }
   ],
   "source": [
    "from PIL import Image, ImageTk\n",
    "import tkinter as tk\n",
    "from tkinter import simpledialog, messagebox\n",
    "import random\n",
    "import requests\n",
    "\n",
    "class ImageDisplay:\n",
    "    def __init__(self, root, image_path, duration, callback):\n",
    "        self.root = root\n",
    "        self.root.title(\"Memory Test\")\n",
    "\n",
    "        self.img = Image.open(image_path)\n",
    "        self.photo = ImageTk.PhotoImage(self.img)\n",
    "\n",
    "        self.label = tk.Label(self.root, image=self.photo)\n",
    "        self.label.pack()\n",
    "\n",
    "        # Update the lambda function to pass arguments to ask_questions\n",
    "        self.continue_button = tk.Button(self.root, text=\"Continue\", command=lambda: self.close_window(callback))\n",
    "        self.continue_button.pack()\n",
    "\n",
    "        self.root.after(int(duration * 1000), lambda: self.close_window(callback))\n",
    "\n",
    "    def close_window(self, callback):\n",
    "        self.root.withdraw()  # Withdraw the main window\n",
    "        callback()\n",
    "\n",
    "def get_user_name(root):\n",
    "    root.withdraw()\n",
    "    user_name = simpledialog.askstring(\"Input\", \"Hello! What is your name?\")\n",
    "    root.deiconify()\n",
    "    return user_name\n",
    "\n",
    "def ask_question(root, question, answer):\n",
    "    dialog = tk.Toplevel(root)\n",
    "    dialog.withdraw()\n",
    "    user_input = simpledialog.askstring(\"Memory Test\", question)\n",
    "    dialog.destroy()\n",
    "\n",
    "    if user_input and user_input.lower() == str(answer).lower():\n",
    "        messagebox.showinfo(\"Result\", \"Correct!\")\n",
    "        return True\n",
    "    else:\n",
    "        messagebox.showinfo(\"Result\", \"Incorrect!\")\n",
    "        return False\n",
    "\n",
    "def data_consent():\n",
    "    data_consent_info = \"\"\"DATA CONSENT INFORMATION:\n",
    "\n",
    "Please read:\n",
    "\n",
    "We wish to record your response data to an anonymized public data repository.\n",
    "\n",
    "Your data will be used for educational teaching purposes practicing data analysis and visualization.\n",
    "\n",
    "Please type 'yes' in the box below if you consent to the upload.\"\"\"\n",
    "    \n",
    "    print(data_consent_info)\n",
    "    result = input(\"> \")\n",
    "\n",
    "    if result.lower() == \"yes\":\n",
    "        print(\"Thanks for your participation.\")\n",
    "        print(\"Please contact philip.lewis@ucl.ac.uk if you have any questions or concerns regarding the stored results\")\n",
    "        \n",
    "    else:\n",
    "        raise Exception(\"User did not consent to continue the test.\")\n",
    "\n",
    "def generate_user_id():\n",
    "    id_instructions = \"\"\"\n",
    " \n",
    "Enter your anonymized ID\n",
    " \n",
    "To generate an anonymous 4-letter unique user identifier, please enter:\n",
    "- two letters based on the initials of a childhood friend\n",
    "- two letters based on the initials of a favorite actor / actress\n",
    " \n",
    "e.g., if your friend was called Charlie Brown and the film star was Tom Cruise,\n",
    "then your unique identifier would be CBTC\n",
    "\"\"\"\n",
    " \n",
    "    print(id_instructions)\n",
    "    user_id = input(\"> \")\n",
    "    print(\"User entered id:\", user_id)\n",
    "    return user_id\n",
    "\n",
    "def memory_test():\n",
    "    random.seed(1)\n",
    "    data_consent()\n",
    "    user_id = generate_user_id()\n",
    "\n",
    "    root = tk.Tk()\n",
    "    user_name = get_user_name(root)\n",
    "\n",
    "    introduction = f\"{user_name}, you will be shown a grid of 9 different shapes of 9 colors. Try to remember them, and then you will be asked a series of questions to test your memory.\"\n",
    "    messagebox.showinfo(\"Memory Test\", introduction)\n",
    "\n",
    "    image_path = \"shapes grid.png\"\n",
    "    display = ImageDisplay(root, image_path, 10, lambda: ask_questions(root, user_name, user_id, None, None))  # Pass user_name, user_id, data_dict, and form_url\n",
    "\n",
    "    root.mainloop()\n",
    "\n",
    "    data_dict = {\n",
    "        \"Name\": user_name,\n",
    "        \"ID\": user_id,\n",
    "        \"Age\": None,\n",
    "        \"Gender\": None,\n",
    "        \"Score\": None,}\n",
    "\n",
    "    form_url = \"https://docs.google.com/forms/d/e/1FAIpQLSfGCn-pDk8ayrWTCKGjmSMfZK1YNiYjPP1jIspEp1tUX6IPlA/viewform?usp=sf_link\"\n",
    "    ask_questions(root, user_name, user_id, data_dict, form_url)\n",
    "\n",
    "\n",
    "\n",
    "def ask_questions(root, user_name, user_id, data_dict, form_url):\n",
    "    questions = [\n",
    "        (\"Which shape was pink?\", \"star\"),\n",
    "        (\"What color was the triangle?\", \"green\"),\n",
    "        (\"Which row was the pentagon in? (1, 2, or 3)\", \"2\"),\n",
    "        (\"What color was the hexagon?\", \"black\"),\n",
    "        (\"Was there an orange shape? (yes or no)\", \"no\")]\n",
    "\n",
    "    score = 0\n",
    "\n",
    "    for question, answer in questions:\n",
    "        if ask_question(root, question, answer):\n",
    "            score += 1\n",
    "    messagebox.showinfo(\"Memory Test Complete\", f\"Your Score: {score} out of {len(questions)}. Please can answer the following short questions about yourself, so we can record your data\")\n",
    "\n",
    "    age = simpledialog.askinteger(\"Demographic Info\", \"How old are you?\")\n",
    "    gender = simpledialog.askstring(\"Demographic Info\", \"What is your gender?\")\n",
    "\n",
    "def send_to_google_form(data_dict, form_url):\n",
    "    data_dict = {\n",
    "        \"Name\": user_name,\n",
    "        \"ID\": user_id,\n",
    "        \"Age\": None,\n",
    "        \"Gender\": None,\n",
    "        \"Score\": None,}\n",
    "    form_url = \"https://docs.google.com/forms/d/e/1FAIpQLSfGCn-pDk8ayrWTCKGjmSMfZK1YNiYjPP1jIspEp1tUX6IPlA/viewform?usp=sf_link\"\n",
    "    response = requests.post(form_url, data=data_dict)\n",
    "    print(response.text)\n",
    "    send_to_google_form\n",
    "\n",
    "    if form_url:  \n",
    "        send_to_google_form(data_dict, form_url)\n",
    "        \n",
    "    else:\n",
    "        print(\"Warning: form_url is empty, data not sent.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "        memory_test()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f276df8-e3e8-4cd9-b5e0-b0f45c38d219",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a7ef139-2be5-4d2a-9710-46b301ba8a51",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
